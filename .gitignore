# Byte-compiled / optimized / DLL files
# Байт-компилированные/оптимизированные/DLL-файлы
__pycache__/
*.py[cod]
*$py.class

# C extensions
# Расширения C
*.so

# Distribution / packaging
# Распределение/упаковка
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
#  Обычно эти файлы пишутся скриптом Python из шаблона.
#  прежде чем PyInstaller создаст exe-файл, чтобы ввести в него дату/другую информацию.
*.manifest
*.spec

# Installer logs
# Журналы установщика
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
# Отчеты о модульном тестировании/покрытии
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
# Переводы
*.mo
*.pot

# Django stuff:
# Django обращение:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
# Flask обращение:
instance/
.webassets-cache

# Scrapy stuff:.
# Scrapy обращение:
.scrapy

# Sphinx documentation
# Документация Сфинкса
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version
#   Для библиотеки или пакета вы можете игнорировать эти файлы, поскольку код
#   предназначен для работы в нескольких средах; в противном случае проверьте их:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#   Согласно pypa/pipenv#598, рекомендуется включить Pipfile.lock в систему контроля версий.
#   Однако в случае сотрудничества, если имеются зависимости или зависимости, специфичные для платформы
#   не имея кросс-платформенной поддержки, Pipenv может устанавливать зависимости, которые не работают или не работают.
#   установите все необходимые зависимости.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#   Как и в случае с Pipfile.lock, обычно рекомендуется включать поэтику.lock в систему контроля версий.
#   Это особенно рекомендуется для бинарных пакетов, чтобы обеспечить воспроизводимость.
#   обычно игнорируется для библиотек.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   Как и в случае с Pipfile.lock, обычно рекомендуется включать pdm.lock в систему контроля версий.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
#   pdm хранит конфигурации всего проекта в .pdm.toml, но рекомендуется не включать его.
#   в системе контроля версий.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
# Celery обращение
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
# Разобранные файлы SageMath
*.sage.py

# Environments
# окружение
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
# Настройки проекта Spyder
.spyderproject
.spyproject

# Rope project settings
# Настройки проекта Rope
.ropeproject

# mkdocs documentation
# документация mkdocs
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
# Проверка типа Pyre
.pyre/

# pytype static type analyzer
# анализатор статических типов pytype
.pytype/

# Cython debug symbols
# Символы отладки Cython
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#  Специальный шаблон JetBrains хранится в отдельном файле JetBrains.gitignore, который может
#  можно найти по адресу https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore.
#  и может быть добавлен в глобальный gitignore или объединен с этим файлом. Для более ядерного
#  вариант (не рекомендуется), вы можете раскомментировать следующее, чтобы игнорировать всю папку идей.
.idea/

.vscode
